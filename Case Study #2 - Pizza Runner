A. Pizza Metrics

-- 1. How many pizzas were ordered?
SELECT COUNT(pizza_id) AS count_of_ordered_pizzas
FROM customer_orders;

-- 2. How many unique customer orders were made?
SELECT COUNT(DISTINCT order_id) AS count_of_unique_orders
FROM customer_orders;

-- 3.How many successful orders were delivered by each runner?
SELECT runner_id,COUNT(order_id) AS count_of_successful_orders
FROM runner_orders
WHERE pickup_time <> 'null'
GROUP BY runner_id
ORDER BY runner_id;

-- 4.How many of each type of pizza was delivered?
WITH delivered_orders AS(
  SELECT
  order_id
  FROM runner_orders
  WHERE pickup_time <> 'null'
 )
SELECT
pizza_id , COUNT(pizza_id) AS count_of_delivered
FROM customer_orders co
JOIN delivered_orders d
ON co.order_id = d.order_id
GROUP BY pizza_id
ORDER BY pizza_id;

-- 5.How many Vegetarian and Meatlovers were ordered by each customer?
SELECT 
p.pizza_name, COUNT(c.pizza_id) AS count_of_ordered
FROM customer_orders c
JOIN pizza_names p
ON c.pizza_id = p.pizza_id
GROUP BY p.pizza_name
ORDER BY p.pizza_name;

-- 6.What was the maximum number of pizzas delivered in a single order?
WITH delivered_orders AS (
  SELECT
  c.order_id, COUNT(c.pizza_id) AS count_of_delivered_pizzas, 
  RANK () OVER (ORDER BY COUNT(c.pizza_id) DESC) AS rank
  FROM customer_orders c
  JOIN runner_orders r
  ON c.order_id = r.order_id
  WHERE pickup_time <> 'null'
  GROUP BY   c.order_id
  )
  SELECT  order_id,  count_of_delivered_pizzas
  FROM delivered_orders
  WHERE rank = 1;

-- 7.For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
WITH pizzas_with_change AS (
  SELECT
  c.customer_id, COUNT(c.pizza_id) AS count_of_changed_pizzas
  FROM customer_orders c
  JOIN runner_orders r
  ON c.order_id = r.order_id
  WHERE 
  ((c.exclusions IS NOT NULL AND c.exclusions <> 'null' AND c.exclusions <> '')
    OR (c.extras IS NOT NULL AND c.extras <> 'null' AND c.extras <> ''))
  AND r.pickup_time <> 'null'
  GROUP BY customer_id
  ),
   pizzas_without_changes AS (
     SELECT
  c.customer_id, COUNT(c.pizza_id) AS count_of_unchanged_pizzas
  FROM customer_orders c
  JOIN runner_orders r
  ON c.order_id = r.order_id
  WHERE 
  ((c.exclusions IS  NULL OR c.exclusions = 'null' OR c.exclusions = '')
    AND (c.extras IS  NULL OR c.extras = 'null' OR c.extras = ''))
  AND r.pickup_time <> 'null'
  GROUP BY customer_id
  )
  SELECT 
  COALESCE(pwc.customer_id, pwoc.customer_id) AS customer_id,
  COALESCE(pwc.count_of_changed_pizzas, 0) AS count_of_changed_pizzas,
  COALESCE(pwoc.count_of_unchanged_pizzas, 0) AS count_of_unchanged_pizzas
  FROM pizzas_with_change pwc
  FULL OUTER JOIN pizzas_without_changes pwoc
  ON pwc.customer_id = pwoc.customer_id
 ORDER BY customer_id;

-- 8. How many pizzas were delivered that had both exclusions and extras?
SELECT 
COUNT(pizza_id)
FROM customer_orders c
JOIN runner_orders r
ON c.order_id = r.order_id
WHERE 
(exclusions IS NOT NULL AND exclusions <> 'null' AND exclusions <> '')
AND 
(extras IS NOT NULL AND extras <> 'null' AND extras <> '' AND extras <> 'NaN')
AND r.pickup_time <> 'null';

-- 9. What was the total volume of pizzas ordered for each hour of the day?
SELECT 
EXTRACT(HOUR FROM order_time) AS hour_of_day, COUNT(pizza_id) AS total_pizzas
FROM customer_orders 
GROUP BY hour_of_day
ORDER BY hour_of_day;

-- 10. What was the volume of orders for each day of the week?
SELECT 
 TO_CHAR(order_time, ' Day') AS day, COUNT(order_id) AS total_orders
FROM customer_orders 
GROUP BY day
ORDER BY total_orders;

B. Runner and Customer Experience

-- 1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
SELECT
DATE_TRUNC('day', DATE '2021-01-01' + FLOOR(EXTRACT(EPOCH FROM(registration_date:: timestamp - DATE '2021-01-01'))/(7*24*60*60)) * INTERVAL '7 days') AS signup_week,
COUNT(*) AS signedup_runners
FROM runners
GROUP BY signup_week
ORDER BY signup_week;

-- 2.What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
SELECT
ro.runner_id,
ROUND(AVG(EXTRACT(EPOCH FROM (ro.pickup_time::timestamp - co.order_time::timestamp))/ 60)::NUMERIC,2) AS avg_pickup_time_minutes
FROM customer_orders co
JOIN runner_orders ro
ON co.order_id = ro.order_id 
WHERE ro.pickup_time IS NOT NULL  AND ro.pickup_time <> 'null'
GROUP BY ro.runner_id
ORDER BY ro.runner_id;

-- 3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
WITH order_summary AS (
  SELECT 
    co.order_id,
    COUNT(co.pizza_id) AS pizza_count,
    ROUND(
      (EXTRACT(EPOCH FROM (ro.pickup_time::timestamp - co.order_time::timestamp)) / 60)::NUMERIC, 
      2
    ) AS time_to_prepare
  FROM customer_orders co
  JOIN runner_orders ro 
    ON co.order_id = ro.order_id
  WHERE ro.pickup_time IS NOT NULL AND ro.pickup_time <> 'null'
  GROUP BY co.order_id, ro.pickup_time, co.order_time
)
SELECT 
  pizza_count,
  ROUND(AVG(time_to_prepare), 2) AS avg_time_to_prepare
FROM order_summary
GROUP BY pizza_count
ORDER BY pizza_count;

-- 4. What was the average distance travelled for each customer?
SELECT 
co.customer_id, ROUND(AVG(REPLACE(ro.distance, 'km',''):: NUMERIC),2)
FROM customer_orders co
JOIN runner_orders ro
ON co.order_id = ro.order_id
WHERE ro.distance IS NOT NULL AND ro.distance <> 'null'
GROUP BY co.customer_id 
ORDER BY co.customer_id;

-- 5. What was the difference between the longest and shortest delivery times for all orders?
SELECT 
MAX(REPLACE(REPLACE(REPLACE(duration, 'minutes', ''),'mins', ''), 'minute', ''):: NUMERIC) - 
MIN(REPLACE(REPLACE(REPLACE(duration, 'minutes', ''),'mins', ''), 'minute', ''):: NUMERIC) AS delivery_time_difference
FROM runner_orders
WHERE pickup_time IS NOT NULL AND pickup_time <> 'null';

-- 6. What was the average speed for each runner for each delivery and do you notice any trend for these values?
  SELECT 
  runner_id ,order_id,
  ROUND(
    (REPLACE(distance, 'km', '')::NUMERIC) /
    (REPLACE(REPLACE(REPLACE(duration, 'minutes', ''),'mins', ''), 'minute', ''):: NUMERIC/60),2) AS avg_speed_kmph
  FROM runner_orders
  WHERE pickup_time IS NOT NULL AND pickup_time <> 'null';

-- 7. What is the successful delivery percentage for each runner?
  WITH delivered_orders AS (
    SELECT runner_id , COUNT(order_id) AS count_of_delivered
    FROM runner_orders 
    WHERE pickup_time IS NOT NULL AND pickup_time <> 'null'
     GROUP BY runner_id
    ),
    cancelled_orders AS (
      SELECT runner_id , COUNT(order_id) AS count_of_cancelled
      FROM runner_orders
      WHERE pickup_time IS NULL OR pickup_time = 'null'
      GROUP BY runner_id
      )
      SELECT 
      COALESCE(dos.runner_id ,cos.runner_id) AS runner_id,
      COALESCE(dos.count_of_delivered,0) AS count_of_delivered,
      COALESCE(cos.count_of_cancelled,0) AS count_of_cancelled,
      ROUND(
        COALESCE(dos.count_of_delivered,0):: NUMERIC / 
        (COALESCE(dos.count_of_delivered,0) + COALESCE(cos.count_of_cancelled,0)) * 100,2) AS delivery_percentage
      FROM delivered_orders dos
      FULL JOIN cancelled_orders cos 
      ON dos.runner_id = cos.runner_id 
      ORDER BY runner_id;

C. Ingredient Optimisation

-- 1. What are the standard ingredients for each pizza?
SELECT
pr.pizza_id , pt.topping_name
FROM pizza_recipes pr
JOIN unnest(string_to_array(pr.toppings, ',')) AS topping_id_str ON true
JOIN pizza_toppings pt
ON pt.topping_id = topping_id_str:: INT
ORDER BY pr.pizza_id;

-- 2. What was the most commonly added extra?
WITH extras_count AS (
  SELECT
pt.topping_name,
COUNT (*) AS extras_count,
  RANK () OVER (ORDER BY COUNT (*) DESC) AS rank
FROM customer_orders co
JOIN unnest(string_to_array(co.extras, ',')) AS extras_id_str ON true
JOIN pizza_toppings pt 
ON pt.topping_id = extras_id_str:: INT
WHERE co.extras IS NOT NULL AND co.extras <> 'null'
GROUP BY pt.topping_name
)
SELECT 
topping_name , extras_count
FROM extras_count
WHERE rank = 1;

-- 3. What was the most common exclusion?
WITH exclusions_count AS (
  SELECT
pt.topping_name,
COUNT (*) AS exclusions_count,
  RANK () OVER (ORDER BY COUNT (*) DESC) AS rank
FROM customer_orders co
JOIN unnest(string_to_array(co.exclusions, ',')) AS exclusions_id_str ON true
JOIN pizza_toppings pt 
ON pt.topping_id = exclusions_id_str:: INT
WHERE co.exclusions IS NOT NULL AND co.exclusions <> 'null'
GROUP BY pt.topping_name
)
SELECT 
topping_name , exclusions_count
FROM exclusions_count
WHERE rank = 1;

-- 4. Generate an order item for each record in the customers_orders table in the format of the following: Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
WITH exclusions AS (
  SELECT
    co.order_id, pt.topping_name AS exclusion_name
  FROM customer_orders co
  JOIN unnest(string_to_array(co.exclusions, ',')) AS exclusions_id_str ON true
  JOIN pizza_toppings pt 
    ON pt.topping_id = exclusions_id_str::INT
  WHERE co.exclusions IS NOT NULL AND co.exclusions <> 'null'
),
extras AS (
  SELECT co.order_id , pt.topping_name AS extra_name
  FROM customer_orders co 
  JOIN unnest(string_to_array(co.extras, ',')) AS extras_id_str ON true
  JOIN pizza_toppings pt
    ON pt.topping_id = extras_id_str::INT 
  WHERE co.extras IS NOT NULL AND co.extras <> 'null'
)

SELECT 
  co.order_id, 
  pn.pizza_name, 
  excs.exclusion_list,
  exts.extra_list,
  pn.pizza_name
  || COALESCE(' - Exclude ' || excs.exclusion_list, '')
  || COALESCE(' - Extra ' || exts.extra_list, '') AS order_item
FROM customer_orders co 
JOIN pizza_names pn ON co.pizza_id = pn.pizza_id
LEFT JOIN (
  SELECT order_id, STRING_AGG(DISTINCT exclusion_name, ', ') AS exclusion_list
  FROM exclusions
  GROUP BY order_id
) excs ON co.order_id = excs.order_id
LEFT JOIN (
  SELECT order_id, STRING_AGG(DISTINCT extra_name, ', ') AS extra_list
  FROM extras
  GROUP BY order_id
) exts ON co.order_id = exts.order_id;

  
 



